mean(oldData$coaaid[oldData$hsgpa])
mean(oldData$coaaid[oldData$hsgpa])
mean(oldData$coaaid[oldData$hsgpa])
mean(oldData$coaaid)
oldData$coaaid
mean(oldData[oldData$coaaid[oldData$hsgpa>0]],na.rm=TRUE)
??ddply
ddply(oldData,c("coaaid","hsgpa"),summarize)
library(ISwR)
install.packages("ISwr")
y
install.packages("ISwR")
library(ISwR)
plot(rnorm(1000))
ls
energy
thuesen
thuesen
lapply(thuesen, mean, na.rm=TRUE)
replicate(10, mean(rexp(20)))
rexp(10)
m<-matrix(rnorm(12),4)
m
apply(m,2,min)
apply(m,1,min)
tapply(m,median)
tapply(m$1,m$2,max)
tapply(m,m,max)
names(oldData)
library(car)
library(aod)
library(plyr)
oldData<-read.csv("C:/Users/Kyle Shank/Desktop/SCHOOL/COA/ECONOMETRICS/github project/coa_admit_data_with_ed.csv")
total.admits<-length(oldData$outcome)
total.deposits<-sum(oldData$outcome==1)
percent.total.deposits<-total.deposits/total.admits
total.admits
total.deposits
percent.total.deposits
names(oldData)
just.freshman.arank<-oldDAta[oldData$freshman==1,]
summary(just.freshman.arank$a_rank)
just.freshman.arank<-oldData[oldData$freshman==1,]
summary(just.freshman.arank$a_rank)
length(just.freshman.arank$outcome)
sd(just.freshman.arank$a_rank)
deposit.arank<-oldData[oldData$outcome==1,]
summary(deposit.arank$a_rank)
deposit.arank<-oldData[oldData$outcome==0,]
summary(deposit.arank$a_rank)
deposit.arank<-oldData[oldData$outcome==1,]
summary(deposit.arank$a_rank)
just.white.arank.deposits<-oldData[oldData$white==1 & oldData$outcome==1,]
summary(just.white.arank.deposits)
just.white.arank.deposits<-oldData[oldData$white==1 & oldData$outcome==1,]
summary(just.white.arank.deposits$a_rank)
length(just.white.arank.deposits$outcome)
sd(just.white.arank.deposits$a_rank)
sd(just.white.arank.deposits$a_rank, na.rm=TRUE)
just.notwhite.arank<-oldData[oldData$white==0,]
summary(just.notwhite.arank$a_rank)
just.notwhite.arank.deposits<-oldData[oldData$white==0 & oldData$outcome==0,]
summary(just.notwhite.arank.deposits$a_rank)
length(just.notwhite.arank.deposits$outcome)
sd(just.white.arank.deposits$a_rank, na.rm=T)
sd(just.notwhite.arank.deposits$a_rank, na.rm=T)
just.freshman.arank.deposits<-oldData[oldData$freshman==1 & oldData$outcome==1,]
summary(just.freshman.arank.deposits)
just.freshman.arank.deposits<-oldData[oldData$freshman==1 & oldData$outcome==1,]
summary(just.freshman.arank.deposits$a_rank)
length(just.freshman.arank.deposits$outcome)
sd(just.freshman.arank.deposits$a_rank, na.rm=T)
just.transfer.arank<-oldData[oldData$freshman==0,]
summary(just.transfer.arank$a_rank)
just.transfer.arank.deposits<-oldData[oldData$freshman==0 & oldData$outcome==1,]
summary(just.transfer.arank.deposits$a_rank
)
length(just.transfer.arank$outcome)
sd(just.transfer.arank$a_rank)
length(just.transfer.arank.deposits$outcome)
sd(just.transfer.arank.deposits$a_rank)
total.transfers
total.transfer
names(oldData)
just.intl.arank<-oldData[oldData$intl==1,]
summary(just.intl.arank$a_rank)
just.intl.arank.deposits<-oldData[oldData$intl==1 & oldData$outcome==1,]
summary(just.intl.arank.deposits$a_rank)
length(just.intl.arank$outcome)
length(just.intl.arank.deposits$outcome)
sd(just.intl.arank$a_rank)
sd(just.intl.arank.deposits$a_rank)
names(oldData)
c<-(59,28,29)
6/365
c<-(59,28,29,0.016)
ages<-c(59,28,29,0.016)
summary(ages)
ages[-4]
ages
ages<-ages[-4]
ages
summary(ages)
cor(oldData, use="pairwise.complete.obs", method="pearson")
cor(oldData, use="pairwise.complete.obs", method="pearson")
correlationMatrix<-cor(oldData, use="pairwise.complete.obs", method="pearson")
correlationMatrix
correlationMatrix[a_rank]
names(correlationMatrix)
summary(correlationMatrix)
correlationMatrix["a_rank"]
correlationMatrix[2,
]
correlationMatrix[1]
correlationMatrix[2]
type(correlationMatrix)
names(correlationMatrix)
class(correlationMatrix)
class(oldData)
correlationMatrix<-as.dataframe(correlationMatrix)
correlationMatrix<-as.data.frame(correlationMatrix)
correlationMatrix
type(correlationMatrix)
class(correlationMatrix)
names(correlationMatrix)
summary(correlationMatrix)
correlationMatrix
correlationMatrix[sat]
correlationMatrix[sat,
]
correlationMatrix[1]
correlationMatrix[1,]
correlationMatrix[2]
correlationMatrix[3]
correlationMatrix[4]
correlation[5]
correlationMatrix[5]
correlationMatrix[6]
correlationMatrix[7]
correlationMatrix[8]
correlationMatrix[9]
correlationMatrix[10]
correlationMatrix[11]
correlationMatrix[12]
correlationMatrix[13]
correlationMatrix[14]
correlationMatrix[15]
correlationMatrix[16]
correlationMatrix[17]
correlationMatrix[18]
correlationMatrix[19]
library(aod)
library(MASS)
library(ggplot2)
library(arm)
oldData<-read.csv("C:/Users/Kyle Shank/Desktop/SCHOOL/COA/ECONOMETRICS/github project/coa_admit_data_with_ed.csv")
logit.output<-glm(outcome ~ freshman + ed + age + female + white + newengland + intl + married +
a_rank + p_rank + interview + award + hs_dummy + test_dummy,
family= binomial(logit),data = na.omit(oldData.reg))
summary(logit.output)
oldData.reg<-oldData
oldData.reg[628,]$age<-NA
hs_dummy<-as.numeric(oldData$hsgpa>0 & !is.na(oldData$hsgpa) | oldData$hsrank>0 & !is.na(oldData$hsrank))
("hs_dummy" is now just a dichotomous variable representing whether or not an admitted student self-reported high school data.)
oldData.reg$hs_dummy<-hs_dummy
oldData.reg<-subset(oldData.reg,select=-hsgpa,-hsrank)
test_dummy<-as.numeric(oldData$sat>0 & !is.na(oldData$sat) | oldData$act>0 & !is.na(oldData$act))
("test_dummy" is now just a dichotomous variable representing whether or not an admitted student self-reported their standardized test scores.)
oldData.reg$test_dummy<-test_dummy
oldData.reg<-subset(oldData.reg,select=-sat,-act)
oldData.reg<-oldData
oldData.reg[628,]$age<-NA
hs_dummy<-as.numeric(oldData$hsgpa>0 & !is.na(oldData$hsgpa) | oldData$hsrank>0 & !is.na(oldData$hsrank))
("hs_dummy" is now just a dichotomous variable representing whether or not an admitted student self-reported high school data.)
oldData.reg$hs_dummy<-hs_dummy
oldData.reg<-subset(oldData.reg,select=-hsgpa)
oldData.reg<-subset(oldData.reg,select=-hsrank)
test_dummy<-as.numeric(oldData$sat>0 & !is.na(oldData$sat) | oldData$act>0 & !is.na(oldData$act))
("test_dummy" is now just a dichotomous variable representing whether or not an admitted student self-reported their standardized test scores.)
oldData.reg$test_dummy<-test_dummy
oldData.reg<-subset(oldData.reg,select=-sat)
oldData.reg<-subset(oldData.reg,select=-act)
oldData.reg<-oldData
oldData.reg[628,]$age<-NA
hs_dummy<-as.numeric(oldData$hsgpa>0 & !is.na(oldData$hsgpa) | oldData$hsrank>0 & !is.na(oldData$hsrank))
#("hs_dummy" is now just a dichotomous variable representing whether or not an admitted student self-reported high school data.)
oldData.reg$hs_dummy<-hs_dummy
oldData.reg<-subset(oldData.reg,select=-hsgpa)
oldData.reg<-subset(oldData.reg,select=-hsrank)
test_dummy<-as.numeric(oldData$sat>0 & !is.na(oldData$sat) | oldData$act>0 & !is.na(oldData$act))
#("test_dummy" is now just a dichotomous variable representing whether or not an admitted student self-reported their standardized test scores.)
oldData.reg$test_dummy<-test_dummy
oldData.reg<-subset(oldData.reg,select=-sat)
oldData.reg<-subset(oldData.reg,select=-act)
logit.output<-glm(outcome ~ freshman + ed + age + female + white + newengland + intl + married +
a_rank + p_rank + interview + award + hs_dummy + test_dummy,
family= binomial(logit),data = na.omit(oldData.reg))
summary(logit.output)
logit.output.test<-glm(outcome ~ freshman + ed + age + female + white + newengland + intl + married +
a_rank + p_rank + interview + award + hsgpa + hsrank + sat + gpa,
family= binomial(logit),data = na.omit(oldData))
logit.output.test<-glm(outcome ~ freshman + ed + age + female + white + newengland + intl + married +
a_rank + p_rank + interview + award + hsgpa + hsrank + sat + act,
family= binomial(logit),data = na.omit(oldData))
??glm
??glm.control
logit.output.test<-glm(outcome ~ freshman + ed + age + female + white + newengland + intl + married +
a_rank + p_rank + interview + award + hsgpa + hsrank + sat + act,
family= binomial(logit),data = na.omit(oldData),maxit=100)
summary(logit.output.test)
logit.output.test<-glm(outcome ~ freshman + ed + age + female + white + newengland  + married +
a_rank + p_rank + interview + award + hsgpa + hsrank + sat + act,
family= binomial(logit),data = na.omit(oldData),maxit=100)
summary(logit.output.test)
logit.output.test<-glm(outcome ~ freshman + ed + age + female + white + newengland  + married +
a_rank + p_rank + interview + award  + hsrank + sat + act,
family= binomial(logit),data = na.omit(oldData),maxit=100)
logit.output.test<-glm(outcome ~ freshman + ed + age + female + white + newengland  + married +
a_rank + p_rank + interview + award  + sat + act,
family= binomial(logit),data = na.omit(oldData),maxit=100)
logit.output.test<-glm(outcome ~ freshman + ed + age + female + white + newengland  + married +
a_rank + p_rank + interview + award + hsgpa + hsrank,
family= binomial(logit),data = na.omit(oldData),maxit=100)
logit.output.test<-glm(outcome ~ freshman + ed + age + female + white + newengland  + married +
a_rank + p_rank + interview + award,
family= binomial(logit),data = na.omit(oldData),maxit=100)
logit.output<-glm(outcome ~ freshman + ed + age + female + white + newengland + intl + married +
a_rank + p_rank + interview + award + hs_dummy + test_dummy,
family= binomial(logit),data = na.omit(oldData.reg))
logit.output.test<-glm(outcome ~ freshman + ed + age + female + white + newengland  + married +
a_rank + p_rank + interview + award,
family= binomial(logit),data = na.omit(oldData),maxit=100)
summary(logit.output.test)
oldData[628,]$age<-NA
logit.output.test<-glm(outcome ~ freshman + ed + age + female + white + newengland  + married +
a_rank + p_rank + interview + award,
family= binomial(logit),data = na.omit(oldData),maxit=100)
logit.output<-glm(outcome ~ freshman + ed + age + female + white + newengland + intl + married +
a_rank + p_rank + interview + award + hs_dummy + test_dummy,
family= binomial(logit),data = na.omit(oldData.reg),maxit=100)
summary(logit.output)
exp(cbind(OR=coef(logit.output),confint.default(logit.output)))
add2<-function(x,y){
x+y
}
add2(5,8)
above10<-function(x){
use <- x > 10
x[use]
}
above10(1:45)
above <- function(x,n){
use<- x > n
x[use]
}
x<-1:20
above(x,9)
above <- function(x,n=10){
use<- x > n
x[use]
}
above(x)
above(x,n=15)
columnMean<- function(x){
nc <- ncol(x)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[,i])
}
means
}
columnMean(airquality)
airquality
columnMean<- function(x){
nc <- ncol(x)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(x[,i])
means
}
columnMean(airquality)
columnMean<- function(x){
nc <- ncol(x)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(x[,i])
}
means
}
columnMean<- function(x){
nc <- ncol(x)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(x[,i])
}
means
}
columnMean(airquality)
columnMean<- function(x, removeNA = TRUE){
nc <- ncol(x)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(x[,i], na.rm= removeNA)
}
means
}
columnMean(airquality)
columnMean(airquality, removeNA=FALSE)
mean
??mean()
args(mean)
args(mean)
args(glm)
x<-list(a=1:5, b=rnorm(10))
x
lapply(x,mean)
x<-list(a=1:5, b=rnorm(1000))
lapply(x,mean)
lapply(x,mean)
total1
total.admits
??runif
setwd("C://Users/Kyle Shank/Desktop/SCHOOL/COURSERA/RProgramming/Coding Assignment 1/coursera-r-programming/")
directory<-("./specdata/")
all.files <- paste(directory, as.character(list.files(directory)),sep="")
all.files
work.files <- sapply(all.files[306],read.csv,header=T,sep=",")
work.files
work.files <- sapply(all.files[306,],read.csv,header=T,sep=",")
work.files <- sapply(all.files[,306],read.csv,header=T,sep=",")
class(all.files)
all.files$326
all.files[326]
work.files <- sapply(all.files[326],read.csv,header=T,sep=",")
work.files
class(work.files)
summary(work.files)
work.files <- apply(all.files[1],read.csv,header=T,sep=",")
work.files <- sapply(all.files[1],read.csv)
work.files
work.files <- sapply(all.files,read.csv,header=T,sep=",")
class(work.files)
work.files[,1:10]
work.files
directory<-("./specdata/")
all.files <- paste(directory, as.character(list.files(directory)),sep="")
all.files
work.files <- sapply(all.files,read.csv,header=T,sep=",")
work.files
work.files <- lapply(all.files[1],read.csv,header=T,sep=",")
work.files
work.files[1:5]
all.files <- paste(directory, as.character(list.files(directory)),sep="")
all.files
work.files <- lapply(all.files[id],read.csv,header=T,sep=",")
work.files <- lapply(all.files[23],read.csv,header=T,sep=",")
work.files
na.removed <- na.omit(work.files)
na.removed
work.files
class(Work.files)
class(work.files)
work.files <- data.frame(lapply(all.files[23],read.csv,header=T,sep=","))
work.files
class(work.files)
na.removed <- na.omit(work.files)
na.removed
mean.vector <- c()
mean.vector <- c(na.removed)
result <- mean(mean.vector)
mean.vector
na.removed
mean.vector <- c(na.removed$sulfate)
mean.vector
result <- mean(mean.vector)
return(round(result,3))
result
round(result,3)
mean.vector <- c(na.removed$nitrate)
result <- mean(mean.vector)
round(result,3)
pollutantmean <- function(directory, pollutant = "sulfate", id = 1:332) {
directory<-("./specdata/")
## set value for "directory"
mean.vector <- c()
## initialize a vector to hold the pollutant data
all.files <- paste(directory, as.character(list.files(directory)),sep="")
## creates a character vector of the file paths of each .csv file within the directory
work.files <- data.frame(lapply(all.files[id],read.csv,header=T,sep=","))
na.removed <- na.omit(work.files)
mean.vector <- c(na.removed$pollutant)
result <- mean(mean.vector)
return(round(result,3))
#     for(i in id) {
#         current.file <- read.csv(all.files[i], header=T, sep=",")
#         ## reads in each ith .csv file from "specdata"
#         na.removed <- current.file[!is.na(current.file[, pollutant]), pollutant]
#         ## removes NAs
#         mean.vector <- c(mean.vector, na.removed)
#         ## appends the mean of each na.removed vector to mean.vector
#     }
result <- mean(mean.vector)
return(round(result,3))
## rounds results to match output from example output on Coursera
}
pollutantmean("specdata", "sulfate", 1:10) == 4.064
x
pollutantmean <- function(directory, pollutant = "sulfate", id = 1:332) {
directory<-("./specdata/")
## set value for "directory"
mean.vector <- c()
## initialize a vector to hold the pollutant data
all.files <- paste(directory, as.character(list.files(directory)),sep="")
## creates a character vector of the file paths of each .csv file within the directory
work.files <- data.frame(lapply(all.files[id],read.csv,header=T,sep=","))
na.removed <- na.omit(work.files)
mean.vector <- c(na.removed$pollutant)
result <- mean(mean.vector)
return(round(result,3))
#     for(i in id) {
#         current.file <- read.csv(all.files[i], header=T, sep=",")
#         ## reads in each ith .csv file from "specdata"
#         na.removed <- current.file[!is.na(current.file[, pollutant]), pollutant]
#         ## removes NAs
#         mean.vector <- c(mean.vector, na.removed)
#         ## appends the mean of each na.removed vector to mean.vector
#     }
result <- mean(mean.vector)
return(round(result,3))
## rounds results to match output from example output on Coursera
}
pollutantmean("specdata", "nitrate", 23) == 1.281
all.files <- paste(directory, as.character(list.files(directory)),sep="")
directory<-("./specdata/")
mean.vector <- c()
all.files <- paste(directory, as.character(list.files(directory)),sep="")
directory<-("./specdata/")
all.files <- paste(directory, as.character(list.files(directory)),sep="")
pollutant="sulfate"
pollutant
as.string(pollutant)
as.numeric(pollutant)
as.name(pollutant)
all.files <- paste(directory, as.character(list.files(directory)),sep="")
work.files <- data.frame(lapply(all.files[23],read.csv,header=T,sep=","))
na.removed <- na.omit(work.files)
pollutant = "nitrate"
pollutant
mean.vector <- c(na.removed$as.name(pollutant))
pollutant = as.name(pollutant)
mean.vector <- c(na.removed$pollutant)
mean.vector
na.removed
work.files <- data.frame(lapply(all.files[id],read.csv,header=T,sep=","))
work.files <- data.frame(lapply(all.files[i23],read.csv,header=T,sep=","))
work.files <- data.frame(lapply(all.files[23],read.csv,header=T,sep=","))
work.files
mean.vector <- [!is.na(work.files[, pollutant]), pollutant]
mean.vector <- work.files[!is.na(work.files[, pollutant]), pollutant]
class(work.files)
work.files[,1]
work.files[, sulfate]
work.files, 2
work.files[,2]
head(work.files)
if(grep("sulfate", pollutant) == 1) {
pollutant <- 2
} else {
pollutant <- 3}
work.files <- data.frame(lapply(all.files[23],read.csv,header=T,sep=","))
work.files
mean.vector <- work.files[!is.na(work.files[, 3]), 3]
mean.vector
result <- mean(mean.vector)
round(result,3)
pollutantmean <- function(directory, pollutant = "sulfate", id = 1:332) {
directory<-("./specdata/")
if(grep("sulfate", pollutant) == 1) {
pollutant <- 2
} else {
pollutant <- 3}
## set value for "directory"
## mean.vector <- c()
## initialize a vector to hold the pollutant data
all.files <- paste(directory, as.character(list.files(directory)),sep="")
## creates a character vector of the file paths of each .csv file within the directory
work.files <- data.frame(lapply(all.files[id],read.csv,header=T,sep=","))
mean.vector <- work.files[!is.na(work.files[, pollutant]), pollutant]
result <- mean(mean.vector)
return(round(result,3))
}
pollutantmean("specdata", "nitrate", 23) == 1.281
pollutantmean <- function(directory, pollutant = "sulfate", id = 1:332) {
directory<-("./specdata/")
if(grep("sulfate", pollutant) == 1) {
pollutant <- 2
}
if(grep("nitrate", pollutant) == 1{
pollutant <- 3
}
## set value for "directory"
## mean.vector <- c()
## initialize a vector to hold the pollutant data
all.files <- paste(directory, as.character(list.files(directory)),sep="")
## creates a character vector of the file paths of each .csv file within the directory
work.files <- data.frame(lapply(all.files[id],read.csv,header=T,sep=","))
mean.vector <- work.files[!is.na(work.files[, pollutant]), pollutant]
result <- mean(mean.vector)
return(round(result,3))
}
pollutantmean("specdata", "nitrate", 23) == 1.281
??Grep
