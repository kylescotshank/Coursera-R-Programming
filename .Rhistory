install.packages("ggplot2")
install.packages("devtools")
install.packages("devtools")
install.packages("ggplot2")
install.packages("devtools")
library(devtools)
find_rtools()
install.packages("KernSmooth")
load(KernSmooth)
library(KernSmooth)
# This is my RStudio screenshot
summary(oldData)
library(car)
library(aod)
library(plyr)
oldData<-read.csv("C:/Users/Kyle Shank/Desktop/SCHOOL/COA/ECONOMETRICS/github project/coa_admit_data_2011_2012_2013.csv")
summary(oldData)
hsgpa.admitted
corrected.hsgpa<-oldData$hsgpa[-714]
## This is because there is one entry which has a non-standard GPA (94.92).
## We've suppressed this entry for calculated mean, median, and sd.
mean(corrected.hsgpa, na.rm=TRUE)
median(corrected.hsgpa, na.rm=TRUE)
sd(corrected.hsgpa, na.rm=TRUE)
no.hsgpa.admitted
percent.hsgpa.admitted
percent.no.hsgpa.admitted
hsgpa.deposits
no.hsgpa.deposits
percent.hsgpa.deposits
percent.no.hsgpa.deposits
oldData<-read.csv("C:/Users/Kyle Shank/Desktop/SCHOOL/COA/ECONOMETRICS/github project/coa_admit_data_2011_2012_2013.csv")
total.admitted<-length(oldData$outcome)
total.deposits<-sum(oldData$outcome==1)
percent.total.deposits<-total.deposits/total.applicants
total.applicants
total.deposits
percent.total.deposits
total.admitted<-length(oldData$outcome)
total.deposits<-sum(oldData$outcome==1)
percent.total.deposits<-total.deposits/total.admitted
total.admitted
total.deposits
percent.total.deposits
mean(oldData$age)
median(oldData$age)
sd(oldData$age)
number.freshman.applicants<-sum(oldData$freshman==1)
number.transfer.applicants<-sum(oldData$freshman==0)
percent.freshman.applicants<-number.freshman.applicants/total.admitted
percent.transfer.applicants<-number.transfer.applicants/total.admitted
freshman.deposits<-sum(oldData$freshman==1 & oldData$outcome==1)
percent.freshman.deposits<-freshman.deposits/total.deposits
transfer.deposits<-sum(oldData$freshman==0 & oldData$outcome==1)
percent.transfer.deposits<-1-percent.freshman.deposits
number.freshman.applicants
number.transfer.applicants
percent.freshman.applicants
percent.transfer.applicants
freshman.deposits
transfer.deposits
percent.freshman.deposits
percent.transfer.deposits
hsgpa.admitted<-sum(!is.na(oldData$hsgpa))
no.hsgpa.admitted<-sum(is.na(oldData$hsgpa))
percent.hsgpa.admitted<-hsgpa.admitted/total.admitted
percent.no.hsgpa.admitted<-no.hsgpa.admitted/total.admitted
hsgpa.deposits<-sum(!is.na(oldData$hsgpa) & oldData$outcome==1)
no.hsgpa.deposits<-sum(is.na(oldData$hsgpa)& oldData$outcome==1)
percent.hsgpa.deposits<-hsgpa.deposits/total.deposits
percent.no.hsgpa.deposits<-no.hsgpa.deposits/total.deposits
hsgpa.admitted
corrected.hsgpa<-oldData$hsgpa[-714]
## This is because there is one entry which has a non-standard GPA (94.92).
## We've suppressed this entry for calculated mean, median, and sd.
mean(corrected.hsgpa, na.rm=TRUE)
median(corrected.hsgpa, na.rm=TRUE)
sd(corrected.hsgpa, na.rm=TRUE)
no.hsgpa.admitted
percent.hsgpa.admitted
percent.no.hsgpa.admitted
hsgpa.deposits
no.hsgpa.deposits
percent.hsgpa.deposits
percent.no.hsgpa.deposits
total.deposits
292
hsgpa.deposits/hsgpa.admitted
no.hsgpa.deposits/no.hsgpa.admitted
no.hsgpa.deposits
summary(oldData)
mean(oldData$coaaid & !is.na(oldData$hsgpa))
mean(oldData$coaaid)
mean(oldData$coaaid[oldData$hsgpa>0, na.r,=TRUE])
mean(oldData$coaaid[oldData$hsgpa>0, na.r=TRUE])
thing<-!.is.na(oldData$hsgpa)
thing<-(!is.na(oldData$hsgpa))
thing
thing<-oldData$hsgpa, na.rm=TRUE
thing<-(oldData$hsgpa, na.rm=TRUE)
mean(oldData$coaaid[oldData$hsgpa, na.rm=TRUE])
mean(oldData$coaaid[oldData$hsgpa>0, na.rm=TRUE])
mean(oldData$coaaid[oldData$outcome==1])
mean(oldData$coaaid[oldData$outcome==0])
mean(oldData$coaaid)
mean(oldData$coaaid[oldData$hsgpa >=0])
mean(oldData$coaaid[oldData$hsgpa >=0 & oldData$hsgpa != na])
mean(oldData$coaaid[oldData$hsgpa],na.rm=TRUE)
mean(oldData$coaaid[oldData$hsgpa])
mean(oldData$coaaid[oldData$hsgpa])
mean(oldData$coaaid[oldData$hsgpa])
mean(oldData$coaaid)
oldData$coaaid
mean(oldData[oldData$coaaid[oldData$hsgpa>0]],na.rm=TRUE)
??ddply
ddply(oldData,c("coaaid","hsgpa"),summarize)
library(ISwR)
install.packages("ISwr")
y
install.packages("ISwR")
library(ISwR)
plot(rnorm(1000))
ls
energy
thuesen
thuesen
lapply(thuesen, mean, na.rm=TRUE)
replicate(10, mean(rexp(20)))
rexp(10)
m<-matrix(rnorm(12),4)
m
apply(m,2,min)
apply(m,1,min)
tapply(m,median)
tapply(m$1,m$2,max)
tapply(m,m,max)
names(oldData)
library(car)
library(aod)
library(plyr)
oldData<-read.csv("C:/Users/Kyle Shank/Desktop/SCHOOL/COA/ECONOMETRICS/github project/coa_admit_data_with_ed.csv")
total.admits<-length(oldData$outcome)
total.deposits<-sum(oldData$outcome==1)
percent.total.deposits<-total.deposits/total.admits
total.admits
total.deposits
percent.total.deposits
names(oldData)
just.freshman.arank<-oldDAta[oldData$freshman==1,]
summary(just.freshman.arank$a_rank)
just.freshman.arank<-oldData[oldData$freshman==1,]
summary(just.freshman.arank$a_rank)
length(just.freshman.arank$outcome)
sd(just.freshman.arank$a_rank)
deposit.arank<-oldData[oldData$outcome==1,]
summary(deposit.arank$a_rank)
deposit.arank<-oldData[oldData$outcome==0,]
summary(deposit.arank$a_rank)
deposit.arank<-oldData[oldData$outcome==1,]
summary(deposit.arank$a_rank)
just.white.arank.deposits<-oldData[oldData$white==1 & oldData$outcome==1,]
summary(just.white.arank.deposits)
just.white.arank.deposits<-oldData[oldData$white==1 & oldData$outcome==1,]
summary(just.white.arank.deposits$a_rank)
length(just.white.arank.deposits$outcome)
sd(just.white.arank.deposits$a_rank)
sd(just.white.arank.deposits$a_rank, na.rm=TRUE)
just.notwhite.arank<-oldData[oldData$white==0,]
summary(just.notwhite.arank$a_rank)
just.notwhite.arank.deposits<-oldData[oldData$white==0 & oldData$outcome==0,]
summary(just.notwhite.arank.deposits$a_rank)
length(just.notwhite.arank.deposits$outcome)
sd(just.white.arank.deposits$a_rank, na.rm=T)
sd(just.notwhite.arank.deposits$a_rank, na.rm=T)
just.freshman.arank.deposits<-oldData[oldData$freshman==1 & oldData$outcome==1,]
summary(just.freshman.arank.deposits)
just.freshman.arank.deposits<-oldData[oldData$freshman==1 & oldData$outcome==1,]
summary(just.freshman.arank.deposits$a_rank)
length(just.freshman.arank.deposits$outcome)
sd(just.freshman.arank.deposits$a_rank, na.rm=T)
just.transfer.arank<-oldData[oldData$freshman==0,]
summary(just.transfer.arank$a_rank)
just.transfer.arank.deposits<-oldData[oldData$freshman==0 & oldData$outcome==1,]
summary(just.transfer.arank.deposits$a_rank
)
length(just.transfer.arank$outcome)
sd(just.transfer.arank$a_rank)
length(just.transfer.arank.deposits$outcome)
sd(just.transfer.arank.deposits$a_rank)
total.transfers
total.transfer
names(oldData)
just.intl.arank<-oldData[oldData$intl==1,]
summary(just.intl.arank$a_rank)
just.intl.arank.deposits<-oldData[oldData$intl==1 & oldData$outcome==1,]
summary(just.intl.arank.deposits$a_rank)
length(just.intl.arank$outcome)
length(just.intl.arank.deposits$outcome)
sd(just.intl.arank$a_rank)
sd(just.intl.arank.deposits$a_rank)
names(oldData)
c<-(59,28,29)
6/365
c<-(59,28,29,0.016)
ages<-c(59,28,29,0.016)
summary(ages)
ages[-4]
ages
ages<-ages[-4]
ages
summary(ages)
cor(oldData, use="pairwise.complete.obs", method="pearson")
cor(oldData, use="pairwise.complete.obs", method="pearson")
correlationMatrix<-cor(oldData, use="pairwise.complete.obs", method="pearson")
correlationMatrix
correlationMatrix[a_rank]
names(correlationMatrix)
summary(correlationMatrix)
correlationMatrix["a_rank"]
correlationMatrix[2,
]
correlationMatrix[1]
correlationMatrix[2]
type(correlationMatrix)
names(correlationMatrix)
class(correlationMatrix)
class(oldData)
correlationMatrix<-as.dataframe(correlationMatrix)
correlationMatrix<-as.data.frame(correlationMatrix)
correlationMatrix
type(correlationMatrix)
class(correlationMatrix)
names(correlationMatrix)
summary(correlationMatrix)
correlationMatrix
correlationMatrix[sat]
correlationMatrix[sat,
]
correlationMatrix[1]
correlationMatrix[1,]
correlationMatrix[2]
correlationMatrix[3]
correlationMatrix[4]
correlation[5]
correlationMatrix[5]
correlationMatrix[6]
correlationMatrix[7]
correlationMatrix[8]
correlationMatrix[9]
correlationMatrix[10]
correlationMatrix[11]
correlationMatrix[12]
correlationMatrix[13]
correlationMatrix[14]
correlationMatrix[15]
correlationMatrix[16]
correlationMatrix[17]
correlationMatrix[18]
correlationMatrix[19]
library(aod)
library(MASS)
library(ggplot2)
library(arm)
oldData<-read.csv("C:/Users/Kyle Shank/Desktop/SCHOOL/COA/ECONOMETRICS/github project/coa_admit_data_with_ed.csv")
logit.output<-glm(outcome ~ freshman + ed + age + female + white + newengland + intl + married +
a_rank + p_rank + interview + award + hs_dummy + test_dummy,
family= binomial(logit),data = na.omit(oldData.reg))
summary(logit.output)
oldData.reg<-oldData
oldData.reg[628,]$age<-NA
hs_dummy<-as.numeric(oldData$hsgpa>0 & !is.na(oldData$hsgpa) | oldData$hsrank>0 & !is.na(oldData$hsrank))
("hs_dummy" is now just a dichotomous variable representing whether or not an admitted student self-reported high school data.)
oldData.reg$hs_dummy<-hs_dummy
oldData.reg<-subset(oldData.reg,select=-hsgpa,-hsrank)
test_dummy<-as.numeric(oldData$sat>0 & !is.na(oldData$sat) | oldData$act>0 & !is.na(oldData$act))
("test_dummy" is now just a dichotomous variable representing whether or not an admitted student self-reported their standardized test scores.)
oldData.reg$test_dummy<-test_dummy
oldData.reg<-subset(oldData.reg,select=-sat,-act)
oldData.reg<-oldData
oldData.reg[628,]$age<-NA
hs_dummy<-as.numeric(oldData$hsgpa>0 & !is.na(oldData$hsgpa) | oldData$hsrank>0 & !is.na(oldData$hsrank))
("hs_dummy" is now just a dichotomous variable representing whether or not an admitted student self-reported high school data.)
oldData.reg$hs_dummy<-hs_dummy
oldData.reg<-subset(oldData.reg,select=-hsgpa)
oldData.reg<-subset(oldData.reg,select=-hsrank)
test_dummy<-as.numeric(oldData$sat>0 & !is.na(oldData$sat) | oldData$act>0 & !is.na(oldData$act))
("test_dummy" is now just a dichotomous variable representing whether or not an admitted student self-reported their standardized test scores.)
oldData.reg$test_dummy<-test_dummy
oldData.reg<-subset(oldData.reg,select=-sat)
oldData.reg<-subset(oldData.reg,select=-act)
oldData.reg<-oldData
oldData.reg[628,]$age<-NA
hs_dummy<-as.numeric(oldData$hsgpa>0 & !is.na(oldData$hsgpa) | oldData$hsrank>0 & !is.na(oldData$hsrank))
#("hs_dummy" is now just a dichotomous variable representing whether or not an admitted student self-reported high school data.)
oldData.reg$hs_dummy<-hs_dummy
oldData.reg<-subset(oldData.reg,select=-hsgpa)
oldData.reg<-subset(oldData.reg,select=-hsrank)
test_dummy<-as.numeric(oldData$sat>0 & !is.na(oldData$sat) | oldData$act>0 & !is.na(oldData$act))
#("test_dummy" is now just a dichotomous variable representing whether or not an admitted student self-reported their standardized test scores.)
oldData.reg$test_dummy<-test_dummy
oldData.reg<-subset(oldData.reg,select=-sat)
oldData.reg<-subset(oldData.reg,select=-act)
logit.output<-glm(outcome ~ freshman + ed + age + female + white + newengland + intl + married +
a_rank + p_rank + interview + award + hs_dummy + test_dummy,
family= binomial(logit),data = na.omit(oldData.reg))
summary(logit.output)
logit.output.test<-glm(outcome ~ freshman + ed + age + female + white + newengland + intl + married +
a_rank + p_rank + interview + award + hsgpa + hsrank + sat + gpa,
family= binomial(logit),data = na.omit(oldData))
logit.output.test<-glm(outcome ~ freshman + ed + age + female + white + newengland + intl + married +
a_rank + p_rank + interview + award + hsgpa + hsrank + sat + act,
family= binomial(logit),data = na.omit(oldData))
??glm
??glm.control
logit.output.test<-glm(outcome ~ freshman + ed + age + female + white + newengland + intl + married +
a_rank + p_rank + interview + award + hsgpa + hsrank + sat + act,
family= binomial(logit),data = na.omit(oldData),maxit=100)
summary(logit.output.test)
logit.output.test<-glm(outcome ~ freshman + ed + age + female + white + newengland  + married +
a_rank + p_rank + interview + award + hsgpa + hsrank + sat + act,
family= binomial(logit),data = na.omit(oldData),maxit=100)
summary(logit.output.test)
logit.output.test<-glm(outcome ~ freshman + ed + age + female + white + newengland  + married +
a_rank + p_rank + interview + award  + hsrank + sat + act,
family= binomial(logit),data = na.omit(oldData),maxit=100)
logit.output.test<-glm(outcome ~ freshman + ed + age + female + white + newengland  + married +
a_rank + p_rank + interview + award  + sat + act,
family= binomial(logit),data = na.omit(oldData),maxit=100)
logit.output.test<-glm(outcome ~ freshman + ed + age + female + white + newengland  + married +
a_rank + p_rank + interview + award + hsgpa + hsrank,
family= binomial(logit),data = na.omit(oldData),maxit=100)
logit.output.test<-glm(outcome ~ freshman + ed + age + female + white + newengland  + married +
a_rank + p_rank + interview + award,
family= binomial(logit),data = na.omit(oldData),maxit=100)
logit.output<-glm(outcome ~ freshman + ed + age + female + white + newengland + intl + married +
a_rank + p_rank + interview + award + hs_dummy + test_dummy,
family= binomial(logit),data = na.omit(oldData.reg))
logit.output.test<-glm(outcome ~ freshman + ed + age + female + white + newengland  + married +
a_rank + p_rank + interview + award,
family= binomial(logit),data = na.omit(oldData),maxit=100)
summary(logit.output.test)
oldData[628,]$age<-NA
logit.output.test<-glm(outcome ~ freshman + ed + age + female + white + newengland  + married +
a_rank + p_rank + interview + award,
family= binomial(logit),data = na.omit(oldData),maxit=100)
logit.output<-glm(outcome ~ freshman + ed + age + female + white + newengland + intl + married +
a_rank + p_rank + interview + award + hs_dummy + test_dummy,
family= binomial(logit),data = na.omit(oldData.reg),maxit=100)
summary(logit.output)
exp(cbind(OR=coef(logit.output),confint.default(logit.output)))
add2<-function(x,y){
x+y
}
add2(5,8)
above10<-function(x){
use <- x > 10
x[use]
}
above10(1:45)
above <- function(x,n){
use<- x > n
x[use]
}
x<-1:20
above(x,9)
above <- function(x,n=10){
use<- x > n
x[use]
}
above(x)
above(x,n=15)
columnMean<- function(x){
nc <- ncol(x)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[,i])
}
means
}
columnMean(airquality)
airquality
columnMean<- function(x){
nc <- ncol(x)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(x[,i])
means
}
columnMean(airquality)
columnMean<- function(x){
nc <- ncol(x)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(x[,i])
}
means
}
columnMean<- function(x){
nc <- ncol(x)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(x[,i])
}
means
}
columnMean(airquality)
columnMean<- function(x, removeNA = TRUE){
nc <- ncol(x)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(x[,i], na.rm= removeNA)
}
means
}
columnMean(airquality)
columnMean(airquality, removeNA=FALSE)
mean
??mean()
args(mean)
args(mean)
args(glm)
x<-list(a=1:5, b=rnorm(10))
x
lapply(x,mean)
x<-list(a=1:5, b=rnorm(1000))
lapply(x,mean)
lapply(x,mean)
total1
total.admits
??runif
complete.df <- complete("specdata", 1:332)
source(complete.R)
source("complete.R")
getwd()
setwd("C:/Users/Kyle Shank/Desktop/SCHOOL/COURSERA/RProgramming/Coding Assignment 1/coursera-r-programming/")
getwd()
list.files()
sourcE("complete.R")
source("complete.R")
complete.df<-complete("specdata",1:332)
complete.df
threshold = 150
valid.ids <- complete_table$id[complete.df$nobs > threshold]
valid.ids <- complete.df$id[complete.df$nobs > threshold]
valid.ids
valid.ids
directory="specdata"
complete.df <- complete("specdata", 1:332)
## utilizes "complete.R" to create a data frame of ids and observations
valid.ids <- complete_table$id[complete.df$nobs > threshold]
## Creates an integer vector of all ids where nobs > threshold
file.names <- list.files(directory)
file,names
file.names
complete.df <- complete("specdata", 1:332)
complete.df
valid.ids
file.names
file.numbers <- as.numeric(sub('\\.csv$','', file.names))
file.numbers
selected.files <- file.names[match(valid.ids, file.numbers)]
selected.files
nobs.complete.cases <- lapply(selected.list,complete.cases)
selected.list <- lapply(file.path(directory,selected.files), read.csv)
corr.complete.cases <- lapply(selected.list,complete.cases)
corr.complete.cases
corr.counts <- lapply(nobs.complete.cases,which)
corr.counts <- lapply(corr.complete.cases,which)
corr.counts
corr.complete.cases <- lapply(selected.list, function(x) x[cor(selected.list$nitrate,
selected.list$sulfate,
use="complete.obs")]
corr.complete.cases <- lapply(selected.list, function(x) x[cor(selected.list$nitrate,
selected.list$sulfate,
use="complete.obs")])
selected.list
only.complete <- complete.cases(valid.ids(row))
valid.ids <- complete.df$id[complete.df$nobs > threshold]
only.complete <- complete.cases(valid.ids(row))
valid.ids
valid.ids[,]
valid.ids(row)
valid.ids[,1]
valid.ids <- complete.df$id[complete.df$nobs > threshold]
valid.ids
valid.ids <- complete.df[complete.df$nobs > threshold]/$id
valid.ids <- complete.df[complete.df$nobs > threshold]$id
valid.ids <- complete.df$id[complete.df$nobs > threshold]
valid.ids
file.names <- list.files(directory)
## Read in all of the files currently in "specdata" directory
file.numbers <- as.numeric(sub('\\.csv$','', file.names))
## Convert all of the elements of "file.names" vector to numeric
## by calling sub().
selected.files <- file.names[match(valid.ids, file.numbers)]
file.names
valid.ids
selected.files
above.trheshold <- lapply(file.path(directory,selected.files), read.csv)
above.threshold <- lapply(file.path(directory,selected.files), read.csv)
class(above.threshold)
calculate.cor = function(row) {
cc = complete.cases(row)
cor(row[cc,]$sulfate, row[cc,]$nitrate)
}
results <- sapply(above.threshold, calculate.cor)
return(results)
results
head(results)
cc = complete.cases(row)
cc = complete.cases()
class(results)
